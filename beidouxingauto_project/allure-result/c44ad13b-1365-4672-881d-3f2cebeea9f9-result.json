{"name": "test_invest_23", "status": "failed", "statusDetails": {"message": "AssertionError: '余额不足' != '该标可投金额不足,可投金额：18000.0'\n- 余额不足\n+ 该标可投金额不足,可投金额：18000.0", "trace": "self = <test_invest.Test_Invest_Project testMethod=test_invest_23>\ncase = {'expect_data': '{\"code\":2,\"msg\":\"余额不足\"}', 'extract': None, 'headers': 'invest2_token', 'id': 23, ...}\n\n    @data(*case_json)\n    def test_invest(self,case):\n        self.logger.info(\"====开始测试>>{}<<接口===\".format(case[\"title\"]));\n        #1.处理测试数据\n        #1.1替换json字符串中的需要替换的参数\n        case[\"request_data\"] = replace_args_re(case[\"request_data\"],self.__class__);\n        #1.2反序列化字符串\n        request_data = json.loads(case[\"request_data\"]);\n        expect_data =json.loads(case[\"expect_data\"]);\n        #2.测试步骤\n        if case[\"sql\"]:\n            #获取投资前的金额\n            sql=\"select leave_amount from member where id=  {}\".format(request_data[\"member_id\"]);\n            before_leave_amount =self.db.select_one_data(sql=sql)[\"leave_amount\"];\n            self.logger.info(\"该用户投资前的金额是:{}\".format(before_leave_amount));\n        #发送请求\n        base_url = setting.PROJECT_URL+setting.INTERFACE[case[\"interface\"]];\n        if case[\"headers\"]:\n            headers = {\"Authorization\": \"Bearer \" + getattr(self,case[\"headers\"])};\n            if self.auth_key ==\"v3\":\n                #加入时间戳和签名sign\n                sign,timestamp = generator_sign(getattr(self,case[\"headers\"]));\n                request_data[\"sign\"] = sign;\n                request_data[\"timestamp\"] =timestamp;\n        else:\n            headers = {};\n        response = self.send_request(url=base_url,method=case[\"method\"],json=request_data,headers=headers)\n        res_text =  response.text;\n        res_json = response.json();\n        #3.断言\n        try:\n            self.assertEqual(expect_data[\"code\"],res_json[\"code\"]);\n            self.assertEqual(expect_data[\"msg\"],res_json[\"msg\"]);\n        except Exception as e:\n            self.logger.exception(\"{}:测试失败\".format(case[\"title\"]));\n            self.logger.warning(\"请求数据是:{}\".format(request_data));\n            self.logger.warning(\"期望结果是:{}\".format(expect_data));\n            self.logger.warning(\"实际结果是:{}\".format(res_json));\n>           raise e;\n\ntestcases/test_invest.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestcases/test_invest.py:105: in test_invest\n    self.assertEqual(expect_data[\"msg\"],res_json[\"msg\"]);\nE   AssertionError: '余额不足' != '该标可投金额不足,可投金额：18000.0'\nE   - 余额不足\nE   + 该标可投金额不足,可投金额：18000.0"}, "description": "投资项目--投资金额大于可用余额", "attachments": [{"name": "log", "source": "9c2d704f-5b1e-4327-9e0e-efe37f3d9144-attachment.txt", "type": "text/plain"}], "start": 1610770850058, "stop": 1610770850187, "uuid": "f99b0e84-980a-401a-8f69-b35d61097ad3", "historyId": "faada03957357452d65116f8356ab59f", "testCaseId": "3645bf8b9bef20e886552953c7b725af", "fullName": "testcases.test_invest.Test_Invest_Project#test_invest_23", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_invest"}, {"name": "subSuite", "value": "Test_Invest_Project"}, {"name": "host", "value": "yantianpeng.local"}, {"name": "thread", "value": "34298-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_invest"}]}